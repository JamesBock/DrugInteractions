@page "/"
@namespace LockStepBlazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <script src="_content/MatBlazor/dist/matBlazor.js"></script>
    <link href="_content/MatBlazor/dist/matBlazor.css" rel="stylesheet" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Drug Interactions</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
</head>
<body>
    <app>@*@(await Html.RenderComponentAsync<App>(RenderMode.ServerPrerendered))*@

        @*The initial value of this was ServerPrerendered. Changing this to Server seems to have fixed the multiple runnings or renderings but it seems slower now.
        Conclusion: The default RenderMode is ServerPrerendered which must mean that Mvc could render the components as static contents in order to display the page contents before the blazor app is downloaded and starts, then when the blazor app starts, it takes over the page content. This must be a workaround for user experience that the browser user could wait less time for seeing the contents.*@
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
    <script src="CollapseAnimationService.js"></script>
    <script src="_framework/blazor.server.js"></script>

    @*picked this up from stackoverflow to get dotnet watch run to reconnect to the server*@
    <environment include="Development">
        <script>
            window.Blazor.defaultReconnectionHandler.onConnectionDown = function () {
                //setTimeout(function () {
                    location.reload();
                //}, 0);
            }
        </script>
    </environment>
</body>
</html>
