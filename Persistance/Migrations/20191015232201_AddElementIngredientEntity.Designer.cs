// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UWPLockStep.Persistance.Services;

namespace UWPLockStep.Persistance.Migrations
{
    [DbContext(typeof(LockStepContextSql))]
    [Migration("20191015232201_AddElementIngredientEntity")]
    partial class AddElementIngredientEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Joins.ElementIngredient", b =>
                {
                    b.Property<int>("ElementId")
                        .HasColumnName("ElementId");

                    b.Property<int>("IngredientId")
                        .HasColumnName("IngredientId");

                    b.HasKey("ElementId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ElementIngredients");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.PolicyBase", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PolicyId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Maximum")
                        .HasColumnName("Maximum");

                    b.Property<decimal>("Minimum")
                        .HasColumnName("Minimum");

                    b.Property<string>("PatientType")
                        .HasColumnName("PatientType");

                    b.Property<string>("PolicyBasis")
                        .HasColumnName("PolicyBasis");

                    b.Property<long>("PolicyDuration")
                        .HasColumnName("PolicyDuration");

                    b.Property<string>("WarningLevel")
                        .HasColumnName("WarningLevel");

                    b.HasKey("PolicyId");

                    b.ToTable("PolicyBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PolicyBase");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Element", b =>
                {
                    b.Property<int>("ElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ElementId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ElementName")
                        .HasColumnName("ElementName");

                    b.Property<string>("ElementType")
                        .HasColumnName("ElementType");

                    b.Property<string>("ElementUnit")
                        .HasColumnName("ElementUnit");

                    b.Property<int?>("IngredientId");

                    b.HasKey("ElementId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IngredientId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IngredientName")
                        .HasColumnName("IngredientName");

                    b.Property<string>("IngredientUnit")
                        .HasColumnName("IngredientUnit");

                    b.Property<decimal>("Osmolarity")
                        .HasColumnName("Osmolarity");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.ElementPolicy", b =>
                {
                    b.HasBaseType("UWPLockStep.Domain.Entities.Policies.PolicyBase");

                    b.Property<int?>("ElementId");

                    b.HasIndex("ElementId");

                    b.HasDiscriminator().HasValue("ElementPolicy");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.IngredientPolicy", b =>
                {
                    b.HasBaseType("UWPLockStep.Domain.Entities.Policies.PolicyBase");

                    b.Property<int?>("IngredientId");

                    b.HasIndex("IngredientId");

                    b.HasDiscriminator().HasValue("IngredientPolicy");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Joins.ElementIngredient", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Element", "Element")
                        .WithMany("ElementIngredients")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Ingredient", "Ingredient")
                        .WithMany("ElementIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Element", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Ingredient")
                        .WithMany("Elements")
                        .HasForeignKey("IngredientId");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.ElementPolicy", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Element", "Element")
                        .WithMany("ElementPolicies")
                        .HasForeignKey("ElementId");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.IngredientPolicy", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Ingredient", "Ingredient")
                        .WithMany("IngredientPolicies")
                        .HasForeignKey("IngredientId");
                });
#pragma warning restore 612, 618
        }
    }
}
