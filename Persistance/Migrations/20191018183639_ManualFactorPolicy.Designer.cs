// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

using UWPLockStep.Persistance.Services;

namespace UWPLockStep.Persistance.Migrations
{
    [DbContext(typeof(LockStepContextSql))]
    [Migration("20191018183639_ManualFactorPolicy")]
    partial class ManualFactorPolicy
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Joins.FactorIngredient", b =>
                {
                    b.Property<int>("FactorId")
                        .HasColumnName("FactorId");

                    b.Property<int>("IngredientId")
                        .HasColumnName("IngredientId");

                    b.HasKey("FactorId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("FactorIngredients");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Joins.IngredientOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderId");

                    b.Property<int>("IngredientId")
                        .HasColumnName("IngredientId");

                    b.HasKey("OrderId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientOrders");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.PolicyBase", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PolicyId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("Maximum")
                        .HasColumnName("Maximum");

                    b.Property<decimal>("Minimum")
                        .HasColumnName("Minimum");

                    b.Property<string>("PatientType")
                        .HasColumnName("PatientType");

                    b.Property<string>("PolicyBasis")
                        .HasColumnName("PolicyBasis");

                    b.Property<long>("PolicyDuration")
                        .HasColumnName("PolicyDuration");

                    b.Property<string>("WarningLevel")
                        .HasColumnName("WarningLevel");

                    b.HasKey("PolicyId");

                    b.ToTable("PolicyBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PolicyBase");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Factor", b =>
                {
                    b.Property<int>("FactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FactorId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FactorName")
                        .HasColumnName("FactorName");

                    b.Property<string>("FactorType")
                        .HasColumnName("FactorType");

                    b.Property<string>("FactorUnit")
                        .HasColumnName("FactorUnit");

                    b.Property<int?>("IngredientId");

                    b.Property<Guid?>("PatientId");

                    b.HasKey("FactorId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("PatientId");

                    b.ToTable("Factors");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IngredientId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IngredientName")
                        .HasColumnName("IngredientName");

                    b.Property<string>("IngredientUnit")
                        .HasColumnName("IngredientUnit");

                    b.Property<int?>("OrderId");

                    b.Property<decimal>("Osmolarity")
                        .HasColumnName("Osmolarity");

                    b.Property<Guid?>("PatientId");

                    b.HasKey("IngredientId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PatientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("OrderDescription");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("OrderName")
                        .HasColumnName("OrderName");

                    b.Property<Guid?>("PatientId");

                    b.Property<int>("PrescriberId");

                    b.Property<string>("PrescriberNotes")
                        .HasColumnName("PrescriberNotes");

                    b.Property<DateTime>("TimeExecuted");

                    b.Property<DateTime>("TimeOrdered");

                    b.HasKey("OrderId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriberId");

                    b.ToTable("Orders");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Order");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PatientId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnName("DateOfBirth");

                    b.Property<decimal>("DayOfLife")
                        .HasColumnName("DayOfLife");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName");

                    b.Property<string>("PatientType")
                        .HasColumnName("PatientType");

                    b.Property<int?>("PractitionerUserId");

                    b.Property<decimal>("WeightG")
                        .HasColumnName("WeightG");

                    b.HasKey("PatientId");

                    b.HasIndex("PractitionerUserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName");

                    b.Property<string>("PostNominals")
                        .HasColumnName("PostNominals");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.FactorPolicy", b =>
                {
                    b.HasBaseType("UWPLockStep.Domain.Entities.Policies.PolicyBase");

                    b.Property<int>("FactorId");

                    b.HasIndex("FactorId");

                    b.HasDiscriminator().HasValue("FactorPolicy");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.IngredientPolicy", b =>
                {
                    b.HasBaseType("UWPLockStep.Domain.Entities.Policies.PolicyBase");

                    b.Property<int?>("IngredientId");

                    b.HasIndex("IngredientId");

                    b.HasDiscriminator().HasValue("IngredientPolicy");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.OrderPolicy", b =>
                {
                    b.HasBaseType("UWPLockStep.Domain.Entities.Policies.PolicyBase");

                    b.Property<int?>("OrderId");

                    b.HasIndex("OrderId");

                    b.HasDiscriminator().HasValue("OrderPolicy");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.FluidOrder", b =>
                {
                    b.HasBaseType("UWPLockStep.Domain.Entities.Tangibles.Order");

                    b.Property<string>("AdministrationRoute")
                        .HasColumnName("AdimnistrationRoute");

                    b.Property<long>("Duration")
                        .HasColumnName("Duration");

                    b.Property<double>("Volume")
                        .HasColumnName("Volume");

                    b.HasDiscriminator().HasValue("FluidOrder");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Joins.FactorIngredient", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Factor", "Factor")
                        .WithMany("FactorIngredients")
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Ingredient", "Ingredient")
                        .WithMany("FactorIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Joins.IngredientOrder", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Ingredient", "Ingredient")
                        .WithMany("IngredientOrders")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Order", "Order")
                        .WithMany("IngredientOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Factor", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Ingredient")
                        .WithMany("Elements")
                        .HasForeignKey("IngredientId");

                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Patient")
                        .WithMany("Factors")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Ingredient", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Order")
                        .WithMany("Ingredients")
                        .HasForeignKey("OrderId");

                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Patient")
                        .WithMany("Ingredients")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Order", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Patient")
                        .WithMany("Orders")
                        .HasForeignKey("PatientId");

                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.User", "Prescriber")
                        .WithMany("Orders")
                        .HasForeignKey("PrescriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Tangibles.Patient", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.User", "Practitioner")
                        .WithMany("Patients")
                        .HasForeignKey("PractitionerUserId");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.FactorPolicy", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Factor")
                        .WithMany()
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.IngredientPolicy", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Ingredient", "Ingredient")
                        .WithMany("IngredientPolicies")
                        .HasForeignKey("IngredientId");
                });

            modelBuilder.Entity("UWPLockStep.Domain.Entities.Policies.OrderPolicy", b =>
                {
                    b.HasOne("UWPLockStep.Domain.Entities.Tangibles.Order", "Order")
                        .WithMany("OrderPolicies")
                        .HasForeignKey("OrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
